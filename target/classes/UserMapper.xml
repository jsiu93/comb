<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ssm.ky.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.ssm.ky.model.User" >
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="accounts" property="accounts" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="seq" property="seq" jdbcType="INTEGER" />
    <result column="accessable" property="accessable" jdbcType="TINYINT" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="createusername" property="createusername" jdbcType="VARCHAR" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="updateusername" property="updateusername" jdbcType="TIMESTAMP" />
    <result column="usertype" property="usertype" jdbcType="TINYINT" />
  </resultMap>
  
  <resultMap type="com.ssm.ky.vo.UserVo" id="userVoResultMap">
  	<id column="id" property="id" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="accounts" property="accounts" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="seq" property="seq" jdbcType="INTEGER" />
    <result column="accessable" property="accessable" jdbcType="TINYINT" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="createusername" property="createusername" jdbcType="VARCHAR" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="updateusername" property="updateusername" jdbcType="TIMESTAMP" />
    <result column="usertype" property="usertype" jdbcType="TINYINT" />
    
    <collection property="roleList" ofType="Role">
    	<id column="roleId" property="id"/>
    	<result column="roleName" property="name"/>
    </collection>
    <collection property="orgList" ofType="Organization">
    	<id column="orgId" property="id"/>
    	<result column="orgName" property="name"/>
    </collection>
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, name, accounts, password, phone, email, description, seq, accessable, createtime, 
    createusername, updatetime, updateusername, usertype
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_user
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.ssm.ky.model.User" >
    insert into t_user (id, name, accounts, 
      password, phone, email, 
      description, seq, accessable, 
      createtime, createusername, updatetime, 
      updateusername, usertype)
    values (#{id,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{accounts,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{seq,jdbcType=INTEGER}, #{accessable,jdbcType=TINYINT}, 
      now(), #{createusername,jdbcType=VARCHAR}, #{updatetime,jdbcType=TIMESTAMP}, 
      #{updateusername,jdbcType=TIMESTAMP}, #{usertype,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.ssm.ky.model.User" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="accounts != null" >
        accounts,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="description != null" >
        description,
      </if>
      <if test="seq != null" >
        seq,
      </if>
      <if test="accessable != null" >
        accessable,
      </if>
        createtime,
      <if test="createusername != null" >
        createusername,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
      <if test="updateusername != null" >
        updateusername,
      </if>
      <if test="usertype != null" >
        usertype,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="accounts != null" >
        #{accounts,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="seq != null" >
        #{seq,jdbcType=INTEGER},
      </if>
      <if test="accessable != null" >
        #{accessable,jdbcType=TINYINT},
      </if>
        now(),
      <if test="createusername != null" >
        #{createusername,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateusername != null" >
        #{updateusername,jdbcType=TIMESTAMP},
      </if>
      <if test="usertype != null" >
        #{usertype,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ssm.ky.model.User" >
    update t_user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="accounts != null" >
        accounts = #{accounts,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="seq != null" >
        seq = #{seq,jdbcType=INTEGER},
      </if>
      <if test="accessable != null" >
        accessable = #{accessable,jdbcType=TINYINT},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="createusername != null" >
        createusername = #{createusername,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateusername != null" >
        updateusername = #{updateusername,jdbcType=TIMESTAMP},
      </if>
      <if test="usertype != null" >
        usertype = #{usertype,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ssm.ky.model.User" >
    update t_user
    set name = #{name,jdbcType=VARCHAR},
      accounts = #{accounts,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      seq = #{seq,jdbcType=INTEGER},
      accessable = #{accessable,jdbcType=TINYINT},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      createusername = #{createusername,jdbcType=VARCHAR},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      updateusername = #{updateusername,jdbcType=TIMESTAMP},
      usertype = #{usertype,jdbcType=TINYINT}
    where id = #{id,jdbcType=CHAR}
  </update>
  
  <select id="findUserByAccounts" parameterType="String" resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List"/>
  	from t_user
  	where accounts = #{accounts}
  </select>
  
  <select id="findUserVoById" parameterType="String" resultMap="userVoResultMap">
  	SELECT t.id, 
	t.`name`, 
	t.accounts, 
	t.`password`, 
	t.phone, 
	t.email, 
	t.description, 
	t.seq, 
	t.accessable, 
	t.createusername, 
	t.createtime, 
	t.updatetime, 
	t.updateusername, 
	t.usertype, 
	o.id as roleId, 
	o.`name` as roleName, 
	s.id as orgId, 
	s.`name` as orgName
	FROM t_user t LEFT OUTER JOIN t_user_role r ON t.id = r.userId
		 LEFT OUTER JOIN t_user_org z ON t.id = z.userId
		 LEFT OUTER JOIN t_organization s ON s.id = z.orgId
		 LEFT OUTER JOIN t_role o ON r.roleId = o.id
	<where>
		t.id = #{id}
	</where>
  </select>
  
  <select id="findDataGrid" parameterType="Map" resultMap="userVoResultMap">
  	SELECT t.id, 
	t.`name`, 
	t.accounts, 
	t.`password`, 
	t.phone, 
	t.email, 
	t.description, 
	t.seq, 
	t.accessable, 
	t.createusername, 
	t.createtime, 
	t.updatetime, 
	t.updateusername, 
	t.usertype, 
	o.id as roleId, 
	o.`name` as roleName, 
	s.id as orgId, 
	s.`name` as orgName
	FROM t_user t LEFT OUTER JOIN t_user_role r ON t.id = r.userId
		 LEFT OUTER JOIN t_user_org z ON t.id = z.userId
		 LEFT OUTER JOIN t_organization s ON s.id = z.orgId
		 LEFT OUTER JOIN t_role o ON r.roleId = o.id
	<where>
		<if test="name != null and name != ''">
			t.name like #{name}
		</if>
		<if test="organizationId != null and organizationId != ''">
			s.id = #{organizationId}
		</if>
	</where>
	<if test="start != null and size != null">
		limit #{start}, #{size}
	</if>
  </select>
  
  
  <select id="getTotal" parameterType="Map" resultType="Long">
  	select count(*)
  	FROM t_user t LEFT OUTER JOIN t_user_role r ON t.id = r.userId
		 LEFT OUTER JOIN t_user_org z ON t.id = z.userId
		 LEFT OUTER JOIN t_organization s ON s.id = z.orgId
		 LEFT OUTER JOIN t_role o ON r.roleId = o.id
	<where>
		<if test="name != null and name != ''">
			t.name like #{name}
		</if>
		<if test="organizationId != null and organizationId != ''">
			s.id = #{organizationId}
		</if>
	</where>
  </select>
  
  <update id="updateUserPwdById">
  	update t_user
  	set password = #{pwd,jdbcType=VARCHAR}
  	where id = #{userId, jdbcType=CHAR}
  </update>
  
   <select id="findDeptZongGong" parameterType="String" resultType="String">
  	SELECT t_user.`name`
	FROM t_user INNER JOIN t_user_role ON t_user.id = t_user_role.userId
		 INNER JOIN t_user_org ON t_user.id = t_user_org.userId
		 INNER JOIN t_organization ON t_organization.id = t_user_org.orgId
		 INNER JOIN t_role ON t_role.id = t_user_role.roleId
	WHERE  t_role.name = '分公司总工' and t_organization.id = (SELECT o.id
	FROM t_organization o LEFT OUTER JOIN t_user_org uo ON o.id = uo.orgId
		 LEFT OUTER JOIN t_user u ON u.id = uo.userId where u.name = #{userName})
  </select>
  
  <select id="findKjc" resultType="String">
  	SELECT t_user.`name`
	FROM t_user INNER JOIN t_user_role ON t_user.id = t_user_role.userId
		 INNER JOIN t_role ON t_role.id = t_user_role.roleId
	WHERE t_role.name='科技处'
  </select>
  
  <select id="isKjc" parameterType="String" resultType="String">
  	SELECT u.`name`
	FROM t_user u LEFT OUTER JOIN t_user_role ur ON u.id = ur.userId
		 LEFT OUTER JOIN t_role r ON r.id = ur.roleId
	WHERE r.name='科技处'
	and u.id=#{id}
  </select>
  
  <select id="userVoComboGrid" parameterType="Map" resultMap="userVoResultMap">
  	SELECT t.id, 
	t.`name`, 
	t.accounts, 
	t.`password`, 
	t.phone, 
	t.email, 
	t.description, 
	t.seq, 
	t.accessable, 
	t.createusername, 
	t.createtime, 
	t.updatetime, 
	t.updateusername, 
	t.usertype, 
	o.id as roleId, 
	o.`name` as roleName, 
	s.id as orgId, 
	s.`name` as orgName
	FROM t_user t LEFT OUTER JOIN t_user_role r ON t.id = r.userId
		 LEFT OUTER JOIN t_user_org z ON t.id = z.userId
		 LEFT OUTER JOIN t_organization s ON s.id = z.orgId
		 LEFT OUTER JOIN t_role o ON r.roleId = o.id
	<if test="start != null and size != null">
		limit #{start}, #{size}
	</if>
  </select>
  
</mapper>